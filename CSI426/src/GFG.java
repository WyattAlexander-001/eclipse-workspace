//// Java program to calculate SHA-512 hash value 
//// SOurce: https://www.geeksforgeeks.org/sha-512-hash-in-java/#
//import java.math.BigInteger; 
//import java.security.MessageDigest; 
//import java.security.NoSuchAlgorithmException; 
//
//// Driver Class 
//public class GFG { 
//	// Main Function 
//	public static String encryptThisString(String input) 
//	{ 
//		try { 
//			// getInstance() method is called with algorithm SHA-512 
//			MessageDigest md = MessageDigest.getInstance("SHA-512"); 
//
//			// digest() method is called 
//			// to calculate message digest of the input string 
//			// returned as array of byte 
//			byte[] messageDigest = md.digest(input.getBytes()); 
//
//			// Convert byte array into signum representation 
//			BigInteger no = new BigInteger(1, messageDigest); 
//
//			// Convert message digest into hex value 
//			String hashtext = no.toString(16); 
//
//			// Add preceding 0s to make it 32 bit 
//			while (hashtext.length() < 32) { 
//				hashtext = "0" + hashtext; 
//			} 
//
//			// return the HashText 
//			return hashtext; 
//		} 
//
//		// For specifying wrong message digest algorithms 
//		catch (NoSuchAlgorithmException e) { 
//			throw new RuntimeException(e); 
//		} 
//	} 
//
//	// Driver code 
//	public static void main(String args[]) throws NoSuchAlgorithmException 
//	{ 
//		System.out.println("HashCode Generated by SHA-512 for: "); 
//
//		String s1 = "GeeksForGeeks"; 
//		System.out.println("\n" + s1 + " : " + encryptThisString(s1)); 
//
//		String s2 = "hello world"; 
//		System.out.println("\n" + s2 + " : " + encryptThisString(s2)); 
//	} 
//} 

//^^ I kept the original code just in case I made too many changes to it and needed a fall bacl ^^

//// Java program to calculate SHA-512 hash value 
//// SOurce: https://www.geeksforgeeks.org/sha-512-hash-in-java/#
//import java.math.BigInteger; 
//import java.security.MessageDigest; 
//import java.security.NoSuchAlgorithmException; 
//
//// Driver Class 
//public class GFG { 
//	// Main Function 
//	public static String encryptThisString(String input) 
//	{ 
//		try { 
//			// getInstance() method is called with algorithm SHA-512 
//			MessageDigest md = MessageDigest.getInstance("SHA-512"); 
//
//			// digest() method is called 
//			// to calculate message digest of the input string 
//			// returned as array of byte 
//			byte[] messageDigest = md.digest(input.getBytes()); 
//
//			// Convert byte array into signum representation 
//			BigInteger no = new BigInteger(1, messageDigest); 
//
//			// Convert message digest into hex value 
//			String hashtext = no.toString(16); 
//
//			// Add preceding 0s to make it 32 bit 
//			while (hashtext.length() < 32) { 
//				hashtext = "0" + hashtext; 
//			} 
//
//			// return the HashText 
//			return hashtext; 
//		} 
//
//		// For specifying wrong message digest algorithms 
//		catch (NoSuchAlgorithmException e) { 
//			throw new RuntimeException(e); 
//		} 
//	} 
//
//	// Driver code 
//	public static void main(String args[]) throws NoSuchAlgorithmException 
//	{ 
//		System.out.println("HashCode Generated by SHA-512 for: "); 
//
//		String s1 = "GeeksForGeeks"; 
//		System.out.println("\n" + s1 + " : " + encryptThisString(s1)); 
//
//		String s2 = "hello world"; 
//		System.out.println("\n" + s2 + " : " + encryptThisString(s2)); 
//	} 
//} 

//^^ I kept the original code just in case I made too many changes to it and needed a fall bacl ^^

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.imageio.ImageIO;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;

// Driver Class
public class GFG {
    // Main Function
    public static String encryptThisString(String input) {
        try {
            // getInstance() method is called with algorithm SHA-512
            MessageDigest md = MessageDigest.getInstance("SHA-512");

            // digest() method is called
            // to calculate message digest of the input string
            // returned as array of byte
            byte[] messageDigest = md.digest(input.getBytes());

            // Convert byte array into signum representation
            BigInteger no = new BigInteger(1, messageDigest);

            // Convert message digest into hex value
            String hashtext = no.toString(16);

            // Add preceding 0s to make it 32 bit
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }

            // return the HashText
            return hashtext;
        }

        // For specifying wrong message digest algorithms
        catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    // Function to read .txt file content as a string
    public static String readFileAsString(String fileName) throws IOException {
        return new String(Files.readAllBytes(Paths.get(fileName)));
    }
    
    // Method to calculate the percentage of bits altered
    public static double calculateAlteredPercentage(String hash1, String hash2) {
        // Convert hex to binary
        String binary1 = new BigInteger(hash1, 16).toString(2);
        String binary2 = new BigInteger(hash2, 16).toString(2);

        // Pad the shorter binary string with leading zeros
        while (binary1.length() < binary2.length()) {
            binary1 = "0" + binary1;
        }
        while (binary2.length() < binary1.length()) {
            binary2 = "0" + binary2;
        }

        // Count the differing bits
        int differingBits = 0;
        for (int i = 0; i < binary1.length(); i++) {
            if (binary1.charAt(i) != binary2.charAt(i)) {
                differingBits++;
            }
        }

        // Calculate and return the percentage of bits that have changed
        double percentage = ((double) differingBits / 512) * 100;
        return percentage;
    }
    
    //Hashing Photos
    //Method to hash a byte array (image data)
    public static String hashBytes(byte[] inputBytes) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-512");
            byte[] messageDigest = md.digest(inputBytes);
            BigInteger no = new BigInteger(1, messageDigest);
            String hashtext = no.toString(16);
            while (hashtext.length() < 32) {
                hashtext = "0" + hashtext;
            }
            return hashtext;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }

    public static byte[] imageFileToByteArray(String filePath) throws IOException {
        return Files.readAllBytes(Paths.get(filePath));
    }

    
    
    
    
    

    // Driver code
    public static void main(String args[]) throws NoSuchAlgorithmException, IOException {
        System.out.println("HashCode Generated by SHA-512 for files:");
        
        // Reading file contents
        String file1 = "dataHW3_Question2/TextFileForHW3_NoChange.txt";
        String file2 = "dataHW3_Question2/TextFileForHW3_OneCharChange.txt";
        String content1 = readFileAsString(file1);
        String content2 = readFileAsString(file2);
        
        //Testing Basic Strings
//        String content1 = "jimmy";
//        String content2 = "timmy";
        
        String hash1 = encryptThisString(content1);
        String hash2 = encryptThisString(content2);

        // Displaying SHA-512 hash values
        System.out.println("\n" + file1 + " :\n\n" + hash1);
        System.out.println("\n" + file2 + " :\n\n" + hash2);
        
        //Testing Jimmy and Timmy, Got a 51.56%
//        System.out.println(hash1);
//        System.out.println(hash2);

        
        double alteredPercentage = calculateAlteredPercentage(hash1, hash2);
        System.out.printf("Percentage of bits altered: %.2f%%\n", alteredPercentage); //We get 47.46% which is an avalanche effect
        
        
        System.out.println("\n======================================================\n");

        
        
        //Image Processiong
        
        // Paths to the original and the modified image
        String originalImagePath = "dataHW3_Question2/imagePikminNoEdit.png";
        
        //Debugging
//        File file = new File(originalImagePath);
//        System.out.println("Does the original image file exist? " + file.exists()); // This should print true if the file path is correct
//        
//        String[] readerFormatNames = ImageIO.getReaderFormatNames();
//        System.out.println("Supported Reader Formats:");
//        for (String format : readerFormatNames) {
//            System.out.println(format);
//        }

        
        String modifiedImagePath = "dataHW3_Question2/imagePikminWithEdit.png";
        // Convert images to byte arrays
        byte[] originalImageBytes = imageFileToByteArray(originalImagePath);
        byte[] modifiedImageBytes = imageFileToByteArray(modifiedImagePath);

        
        // Hash the byte arrays
        String originalHash = hashBytes(originalImageBytes);
        String modifiedHash = hashBytes(modifiedImageBytes);
        
        // Display the hash values
        System.out.println("Original Image Hash: \n" + originalHash);
        System.out.println("Modified Image Hash: \n" + modifiedHash);

        // Optionally, calculate and display the percentage of bits altered
        double alteredPercentageImage = calculateAlteredPercentage(originalHash, modifiedHash);
        System.out.printf("Percentage of bits altered: %.2f%%\n", alteredPercentageImage);
    }
}

