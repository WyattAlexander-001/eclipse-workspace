//	/*
//	 * To change this license header, choose License Headers in Project Properties.
//	 * To change this template file, choose Tools | Templates
//	 * and open the template in the editor.
//	 */
//
//
//
//import java.awt.image.BufferedImage;
//import java.io.BufferedOutputStream;
//import java.io.ByteArrayInputStream;
//import java.io.ByteArrayOutputStream;
//import java.io.File;
//import java.io.FileOutputStream;
//import java.io.IOException;
//import java.io.OutputStream;
//import java.security.NoSuchAlgorithmException;
//import java.security.SecureRandom;
//import java.util.Arrays;
//
//import javax.crypto.KeyGenerator;
//import javax.crypto.SecretKey;
//import javax.imageio.ImageIO;
//import javax.swing.JComboBox;
//import javax.swing.JFileChooser;
//import javax.swing.JOptionPane;
//	/**
//	 *
//	 * @author Pradeep
//	 */
//	public class AESdemo extends javax.swing.JFrame {
//		//Added by Wyatt
//		private JComboBox<String> modeSelection;
//		private AES aesInstance;
//
//
//	  
//	    public AESdemo() {
//	        initComponents();
//	        aesInstance = new AES(); 
//
//	    }
//
//	    /**
//	     * This method is called from within the constructor to initialize the form.
//	     * WARNING: Do NOT modify this code. The content of this method is always
//	     * regenerated by the Form Editor.
//	     */
//	    @SuppressWarnings("unchecked")
//	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
//	    private void initComponents() {
//
//	    	//Added by Wyatt:
//
//	        jFileChooser1 = new javax.swing.JFileChooser();
//	        jFileChooser2 = new javax.swing.JFileChooser();
//	        jPanel1 = new javax.swing.JPanel();
//	        jTextField1 = new javax.swing.JTextField();
//	        jButton1 = new javax.swing.JButton();
//	        jPanel2 = new javax.swing.JPanel();
//	        jTextField2 = new javax.swing.JTextField();	//Decryption
//	        jLabel1 = new javax.swing.JLabel();
//	        jTextField3 = new javax.swing.JTextField();	//Encryption
//	        jLabel2 = new javax.swing.JLabel();
//	        jLabel3 = new javax.swing.JLabel();
//	        jButton2 = new javax.swing.JButton();
//	        jTextField4 = new javax.swing.JTextField();
//	        jButton3 = new javax.swing.JButton();
//	        jRadioButton1 = new javax.swing.JRadioButton();
//	        
//	        //Wyatt
//	        modeSelection = new JComboBox<>(new String[]{"ECB", "CBC", "OFB"});
//	        modeSelection.setBounds(50, 100, 90, 20); // Set bounds as per your layout needs
//	        jPanel2.add(modeSelection); // Add the JComboBox to jPanel2
//
//	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
//
//	        jButton1.setText("Browse Files");
//	        jButton1.addActionListener(new java.awt.event.ActionListener() {
//	            public void actionPerformed(java.awt.event.ActionEvent evt) {
//	                jButton1ActionPerformed(evt);
//	            }
//	        });
//
//	        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
//
//	        jLabel1.setText("Decryption Time (ms)");
//
//	        jLabel2.setText("Encryption Time (ms)");
//
//	        jLabel3.setText("Encryption");
//
//	        jButton2.setText("Begin AES");
//	        jButton2.addActionListener(new java.awt.event.ActionListener() {
//	            public void actionPerformed(java.awt.event.ActionEvent evt) {
//	                jButton2ActionPerformed(evt);
//	            }
//	        });
//
//	        jTextField4.addActionListener(new java.awt.event.ActionListener() {
//	            public void actionPerformed(java.awt.event.ActionEvent evt) {
//	                jTextField4ActionPerformed(evt);
//	            }
//	        });
//
//	        jButton3.setText("Choose Save Directory");
//	        jButton3.addActionListener(new java.awt.event.ActionListener() {
//	            public void actionPerformed(java.awt.event.ActionEvent evt) {
//	                jButton3ActionPerformed(evt);
//	            }
//	        });
//
//	        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
//	        jPanel2.setLayout(jPanel2Layout);
//	        jPanel2Layout.setHorizontalGroup(
//	            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
//	                .addGap(35, 35, 35)
//	                .addComponent(jLabel2)
//	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//	                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
//	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
//	                .addComponent(jLabel1)
//	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//	                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
//	                .addContainerGap(32, Short.MAX_VALUE))
//	            .addGroup(jPanel2Layout.createSequentialGroup()
//	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	                    .addGroup(jPanel2Layout.createSequentialGroup()
//	                        .addGap(17, 17, 17)
//	                        .addComponent(jButton3)
//	                        .addGap(18, 18, 18)
//	                        .addComponent(jTextField4))
//	                    .addGroup(jPanel2Layout.createSequentialGroup()
//	                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	                            .addGroup(jPanel2Layout.createSequentialGroup()
//	                                .addGap(207, 207, 207)
//	                                .addComponent(jButton2))
//	                            .addGroup(jPanel2Layout.createSequentialGroup()
//	                                .addContainerGap()
//	                                .addComponent(jLabel3)))
//	                        .addGap(0, 0, Short.MAX_VALUE)))
//	                .addContainerGap())
//	        );
//	        jPanel2Layout.setVerticalGroup(
//	            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
//	                .addContainerGap()
//	                .addComponent(jLabel3)
//	                .addGap(17, 17, 17)
//	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//	                    .addComponent(jButton3)
//	                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
//	                .addComponent(jButton2)
//	                .addGap(30, 30, 30)
//	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//	                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//	                    .addComponent(jLabel1)
//	                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//	                    .addComponent(jLabel2))
//	                .addGap(20, 20, 20))
//	        );
//
//	        jRadioButton1.setText("Preserve Image Header");
//	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
//	        jPanel1.setLayout(jPanel1Layout);
//	        jPanel1Layout.setHorizontalGroup(
//	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	            .addGroup(jPanel1Layout.createSequentialGroup()
//	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	                    .addGroup(jPanel1Layout.createSequentialGroup()
//	                        .addGap(154, 154, 154)
//	                        .addComponent(jRadioButton1))
//	                    .addGroup(jPanel1Layout.createSequentialGroup()
//	                        .addGap(33, 33, 33)
//	                        .addComponent(jButton1)
//	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//	                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
//	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
//	                .addContainerGap(11, Short.MAX_VALUE)
//	                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//	                .addContainerGap(11, Short.MAX_VALUE))
//	        );
//	        jPanel1Layout.setVerticalGroup(
//	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	            .addGroup(jPanel1Layout.createSequentialGroup()
//	                .addContainerGap(37, Short.MAX_VALUE)
//	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//	                    .addComponent(jButton1)
//	                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//	                .addComponent(jRadioButton1)
//	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
//	                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//	                .addContainerGap())
//	        );
//
//	        jPanel2.getAccessibleContext().setAccessibleName("Encryption");
//
//	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//	        getContentPane().setLayout(layout);
//	        layout.setHorizontalGroup(
//	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//	        );
//	        layout.setVerticalGroup(
//	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//	        );
//
//	        pack();
//	    }// </editor-fold>//GEN-END:initComponents
//
//	    @SuppressWarnings("resource")
//		private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//	      
//	    	//Setting up IV by Wyatt
//	        SecureRandom random = new SecureRandom();
//	        byte[] iv = new byte[16]; // AES uses a block size of 16 bytes
//	        random.nextBytes(iv);
//	        aesInstance.setIV(iv); // Set the IV for the AES instance
//	        //End of setting up IV
//	    	
//	    	BufferedImage buff;
//	      /* To write code for  for encryption & decryption here... */
//	    	
//	    	//Encryption without preserving header
//	    	if(!jRadioButton1.isSelected()){
//	    		//Encryption Starts here
//	    		try{	//Generating key
//	    			AESdemo obj = new AESdemo();
//	    			SecretKey k = obj.Generate_key();
//	    			//Starting time
//			    	long start = System.currentTimeMillis();  
//			    	
//			    	String file = jTextField1.getText();
//			    	BufferedImage img = obj.ReadFile(file);	//Taking image in buffered image from source
//			    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
//			    	
//			    	ImageIO.write(img, "BMP", baos);
//			    	baos.flush();
//			    	
//			    	byte b[] = baos.toByteArray();	//Converting byte array output stream to byte array
//			    	byte encryptImg[] = AES.encrypt(b, k.getEncoded());	//Encrypting image
//			    	
//		            // ================================
//		            // == New Mode Selection Logic ==
//		            // ================================
//
//			    	String selectedMode = modeSelection.getSelectedItem().toString();
//			    	byte[] key = k.getEncoded(); 
//
//			    	switch (selectedMode) {
//			    	    case "ECB":
//			    	        encryptImg = AES.encrypt(b, key); //
//			    	    	System.out.println("ECB!");
//			    	        break;
//			    	    case "CBC":
//			    	        encryptImg = aesInstance.encryptCBC(b); 
//			    	        System.out.println("CBC!");
//			    	        break;
//			    	    case "OFB":
//			    	        encryptImg = aesInstance.encryptDecryptOFB(b); // Use the instance to call the method
//			    	        System.out.println("OFB!");
//			    	        break;
//			    	    default:
//			    	        throw new IllegalArgumentException("Invalid encryption mode selected.");
//			    	}
//
//		            // ===================================
//		            // == End of Mode Selection Logic ==
//		            // ===================================
//			    	
//			    	
//			    	String file2 = jTextField4.getText();	//Taking destination path
//			    	
//			    	OutputStream out = null;
//			    	out = new BufferedOutputStream(new FileOutputStream(file2+ "/encrypt.bmp"));
//			    	out.write(encryptImg);	//Writing image to destination
//			    	long end = System.currentTimeMillis();
//			    	long total = end-start;	//Total time for Encryption
//			    	jTextField3.setText(String.valueOf(total));	//Setting Encryption time
//			    	
//			    	//Decryption starts here
//			    	start = System.currentTimeMillis();	//Starting time
//			    	byte DecryptImage[] = AES.decrypt(encryptImg, k.getEncoded());	//Decryting Encryted image
//			    	
//			    	file2 = jTextField4.getText();	//Taking destination path
//			    	
//			    	out = null;
//			    	out = new BufferedOutputStream(new FileOutputStream(file2+ "/decrypt.bmp"));
//			    	out.write(DecryptImage);	//Writing decrypted image to destination
//			    	end = System.currentTimeMillis();
//			    	total = end-start;
//			    	jTextField2.setText(String.valueOf(total));	//Setting decrytion time
//			    }catch(Exception e){
//			    	JOptionPane.showMessageDialog(null, e);
//		    	}
//	    	}else{
//	    		//Encryption/Decryption with preserved header
//	    		try{
//	    			AESdemo obj = new AESdemo();
//	    			SecretKey key = obj.Generate_key();	//Getting key
//	    			
//	    			long start = System.currentTimeMillis();
//	    			String file = jTextField1.getText();	//getting source path
//	    			BufferedImage img = obj.ReadFile(file);	//Taking image in buffered image from source
//			    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
//			    	
//			    	ImageIO.write(img, "BMP", baos);	//Writing image to byte array output stream
//			    	/*
//			    	DataOutputStream dos = new DataOutputStream(baos);
//			    	for(int i = 0; i < pixels.length; i++){
//			    		dos.writeInt(pixels[i]);
//			    	}
//			    	*/
//			    	
//			    	baos.flush();
//			    	byte[] b = baos.toByteArray();
//			    	byte[] newb = new byte[b.length-54];	//declaring new byte to handle actual image data
//			    	byte[] header = new byte[54];			//declaring header to handle HEADER of image
//			    	
//			    	//Detaching image header 
//			    	for(int j = 0; j < b.length; j++){
//			    		if(j < 54){
//			    			header[j] = b[j];
//			    		}else{
//			    			newb[j-54] = b[j];
//			    		}
//			    	}
//			    	byte encryptImg[] = AES.encrypt(newb, key.getEncoded());	//Encrypting image header
//			    	//Combining image header and encrypted image to one byte array 
//			    	byte combencImage[] = new byte[encryptImg.length + header.length];
//			    	
//			    	for(int x = 0; x < combencImage.length; x++){
//			    		if(x < 54){
//			    			combencImage[x] = header[x];
//			    		}else{
//			    			combencImage[x] = encryptImg[x-54];
//			    		}
//			    	}
//			    	String file2 = jTextField4.getText();	//Taking destination path
//			    	
//			    	OutputStream out = null;
//			    	FileOutputStream fos = new FileOutputStream(file2+ "/encrypt1.bmp");
//			    	out = new BufferedOutputStream(fos);
//			    	out.write(combencImage);	//Writing image to destination file 
//			    	long end = System.currentTimeMillis();
//			    	long total = end-start;	//Total time for Encryption
//			    	jTextField3.setText(String.valueOf(total));	//Setting encryption time
//			    	
//			    	//Decryption starts here
//			    	start = System.currentTimeMillis();
//			    	//Decryting image
//			    	byte DecryptImg[] = AES.decrypt(encryptImg, key.getEncoded());	//Decrypting encrypted image
//			    	//Combining image HEADER and decrypted image bytes to one byte array
//			    	byte combdecImage[] = new byte[DecryptImg.length + header.length];
//			    	for(int x = 0; x < combdecImage.length; x++){
//			    		if(x < 54){
//			    			combdecImage[x] = header[x];
//			    		}else{
//			    			combdecImage[x] = DecryptImg[x-54];
//			    		}
//			    	}
//			    	file2 = jTextField4.getText();	//Taking destination path
//			    	
//			    	//Writing the byte array into the file
//			    	out = null;
//			    	fos = new FileOutputStream(file2+ "/decrypt1.bmp");
//			    	out = new BufferedOutputStream(fos);
//			    	out.write(combdecImage);	//Writing image to destination file 
//			    	
//			    	//Calculating time for decryption
//			    	end = System.currentTimeMillis();
//			    	total = end-start;
//			    	
//			    	jTextField2.setText(String.valueOf(total));	//Setting decryption time
//			    	
//	    		}catch(Exception e){
//	    			JOptionPane.showMessageDialog(null, e);
//	    		}
//	    	}
//	    	
//	    }//GEN-LAST:event_jButton2ActionPerformed
//
//	    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//	        // file chooser to choose image (Browse)
//	        int returnVal = jFileChooser1.showOpenDialog(this);
//	        if (returnVal == JFileChooser.APPROVE_OPTION)
//	        {
//	            File file = jFileChooser1.getSelectedFile();
//	            if (!file.canRead()) {
//	                file.setReadable(true);
//	            }
//
//	            // display file name in text field
//	            jTextField1.setText(file.getAbsolutePath());
//
//	        } else
//	        {
//	            System.out.println("You must choose a file.");
//	        }
//	    }//GEN-LAST:event_jButton1ActionPerformed
//
//	    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
//	        // TODO add your handling code here:
//	    }//GEN-LAST:event_jTextField4ActionPerformed
//
//	    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//	        jFileChooser2.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//	        int returnVal = jFileChooser2.showOpenDialog(this);
//	        if (returnVal == JFileChooser.APPROVE_OPTION)
//	        {
//	            File file = jFileChooser2.getSelectedFile();
//	            if (!file.canRead()) {
//	                file.setReadable(true);
//	            }
//	            // display file name in text field
//	            jTextField4.setText(file.getAbsolutePath());
//
//	        } else
//	        {
//	            System.out.println("You must choose a save directory.");
//	        }
//	    }//GEN-LAST:event_jButton3ActionPerformed
//	    
//	    //Method for key generation
//	    private SecretKey Generate_key(){
//	    	KeyGenerator keygen = null;
//			try {
//				keygen = KeyGenerator.getInstance("AES");
//			} catch (NoSuchAlgorithmException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			keygen.init(128);	//Initializing the keygen to generate 128 bit key
//			SecretKey k = keygen.generateKey();	//Generating key
//			return k;
//	    }
//	    //Method for reading the file
//	    private BufferedImage ReadFile(String file){
//	    	BufferedImage img = null;
//	    	try{
//	    	File f = new File(file);	//Getting file
//	    	img = ImageIO.read(f);		//Reading file
//	    	
//	    	}catch(IOException e){
//	    		JOptionPane.showMessageDialog(null, "Choose your file again...");
//	    	}
//	    	return img;
//	    }
//	    /**
//	     * @param args the command line arguments
//	     */
//	    
//	    public static void main(String args[]) {
//	        /* Set the Nimbus look and feel */
//	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//	         */
//	        try {
//	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//	                if ("Nimbus".equals(info.getName())) {
//	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//	                    break;
//	                }
//	            }
//	        } catch (ClassNotFoundException ex) {
//	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	        } catch (InstantiationException ex) {
//	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	        } catch (IllegalAccessException ex) {
//	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//	        }
//	        //</editor-fold>
//
//	        /* Create and display the form */
//	        java.awt.EventQueue.invokeLater(new Runnable() {
//	            public void run() {
//	                new AESdemo().setVisible(true);
//	            }
//	        });
//	    }
//	    // Variables declaration - do not modify//GEN-BEGIN:variables
//	    private javax.swing.JButton jButton1;
//	    private javax.swing.JButton jButton2;
//	    private javax.swing.JButton jButton3;
//	    private javax.swing.JFileChooser jFileChooser1;
//	    private javax.swing.JFileChooser jFileChooser2;
//	    private javax.swing.JLabel jLabel1;
//	    private javax.swing.JLabel jLabel2;
//	    private javax.swing.JLabel jLabel3;
//	    private javax.swing.JPanel jPanel1;
//	    private javax.swing.JPanel jPanel2;
//	    private javax.swing.JRadioButton jRadioButton1;
//	    private javax.swing.JTextField jTextField1;
//	    private javax.swing.JTextField jTextField2;
//	    private javax.swing.JTextField jTextField3;
//	    private javax.swing.JTextField jTextField4;
//	    // End of variables declaration//GEN-END:variables
//	}











//Version 2:


	/*
	 * To change this license header, choose License Headers in Project Properties.
	 * To change this template file, choose Tools | Templates
	 * and open the template in the editor.
	 */



import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;

import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
	/**
	 *
	 * @author Pradeep
	 */
	public class AESdemo extends javax.swing.JFrame {

		private AES aesInstance;
	    public AESdemo() {
	    	aesInstance.initializeIV();
	        initComponents();
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	    private void initComponents() {

	        jFileChooser1 = new javax.swing.JFileChooser();
	        jFileChooser2 = new javax.swing.JFileChooser();
	        jPanel1 = new javax.swing.JPanel();
	        jTextField1 = new javax.swing.JTextField();
	        jButton1 = new javax.swing.JButton();
	        jPanel2 = new javax.swing.JPanel();
	        jTextField2 = new javax.swing.JTextField();	//Decryption
	        jLabel1 = new javax.swing.JLabel();
	        jTextField3 = new javax.swing.JTextField();	//Encryption
	        jLabel2 = new javax.swing.JLabel();
	        jLabel3 = new javax.swing.JLabel();
	        jButton2 = new javax.swing.JButton();
	        jTextField4 = new javax.swing.JTextField();
	        jButton3 = new javax.swing.JButton();
	        jRadioButton1 = new javax.swing.JRadioButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        jButton1.setText("Browse Files");
	        jButton1.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton1ActionPerformed(evt);
	            }
	        });

	        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

	        jLabel1.setText("Decryption Time (ms)");

	        jLabel2.setText("Encryption Time (ms)");

	        jLabel3.setText("Encryption");

	        jButton2.setText("Begin AES");
	        jButton2.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton2ActionPerformed(evt);
	            }
	        });

	        jTextField4.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jTextField4ActionPerformed(evt);
	            }
	        });

	        jButton3.setText("Choose Save Directory");
	        jButton3.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                jButton3ActionPerformed(evt);
	            }
	        });

	        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
	        jPanel2.setLayout(jPanel2Layout);
	        jPanel2Layout.setHorizontalGroup(
	            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
	                .addGap(35, 35, 35)
	                .addComponent(jLabel2)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
	                .addComponent(jLabel1)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(32, Short.MAX_VALUE))
	            .addGroup(jPanel2Layout.createSequentialGroup()
	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(jPanel2Layout.createSequentialGroup()
	                        .addGap(17, 17, 17)
	                        .addComponent(jButton3)
	                        .addGap(18, 18, 18)
	                        .addComponent(jTextField4))
	                    .addGroup(jPanel2Layout.createSequentialGroup()
	                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addGroup(jPanel2Layout.createSequentialGroup()
	                                .addGap(207, 207, 207)
	                                .addComponent(jButton2))
	                            .addGroup(jPanel2Layout.createSequentialGroup()
	                                .addContainerGap()
	                                .addComponent(jLabel3)))
	                        .addGap(0, 0, Short.MAX_VALUE)))
	                .addContainerGap())
	        );
	        jPanel2Layout.setVerticalGroup(
	            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
	                .addContainerGap()
	                .addComponent(jLabel3)
	                .addGap(17, 17, 17)
	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(jButton3)
	                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
	                .addComponent(jButton2)
	                .addGap(30, 30, 30)
	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(jLabel1)
	                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(jLabel2))
	                .addGap(20, 20, 20))
	        );

	        jRadioButton1.setText("Preserve Image Header");
	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	        jPanel1.setLayout(jPanel1Layout);
	        jPanel1Layout.setHorizontalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addGap(154, 154, 154)
	                        .addComponent(jRadioButton1))
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addGap(33, 33, 33)
	                        .addComponent(jButton1)
	                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
	                .addContainerGap(11, Short.MAX_VALUE)
	                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(11, Short.MAX_VALUE))
	        );
	        jPanel1Layout.setVerticalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addContainerGap(37, Short.MAX_VALUE)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(jButton1)
	                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                .addComponent(jRadioButton1)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
	                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap())
	        );

	        jPanel2.getAccessibleContext().setAccessibleName("Encryption");

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );

	        pack();
	    }// </editor-fold>//GEN-END:initComponents

	    @SuppressWarnings("resource")
		private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
	      
	    	BufferedImage buff;
	      /* To write code for  for encryption & decryption here... */
	    	
	    	//Encryption without preserving header
	    	if(!jRadioButton1.isSelected()){
	    		//Encryption Starts here
	    		try{	//Generating key
	    			AESdemo obj = new AESdemo();
	    			SecretKey k = obj.Generate_key();
	    			//Starting time
			    	long start = System.currentTimeMillis();  
			    	
			    	String file = jTextField1.getText();
			    	BufferedImage img = obj.ReadFile(file);	//Taking image in buffered image from source
			    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
			    	
			    	ImageIO.write(img, "BMP", baos);
			    	baos.flush();
			    	
			    	byte b[] = baos.toByteArray();	//Converting byte array output stream to byte array
			    	byte encryptImg[] = AES.encrypt(b, k.getEncoded());	//Encrypting image
			    	
			    	String file2 = jTextField4.getText();	//Taking destination path
			    	
			    	OutputStream out = null;
			    	out = new BufferedOutputStream(new FileOutputStream(file2+ "/encrypt.bmp"));
			    	out.write(encryptImg);	//Writing image to destination
			    	long end = System.currentTimeMillis();
			    	long total = end-start;	//Total time for Encryption
			    	jTextField3.setText(String.valueOf(total));	//Setting Encryption time
			    	
			    	//Decryption starts here
			    	start = System.currentTimeMillis();	//Starting time
			    	byte DecryptImage[] = AES.decrypt(encryptImg, k.getEncoded());	//Decryting Encryted image
			    	
			    	file2 = jTextField4.getText();	//Taking destination path
			    	
			    	out = null;
			    	out = new BufferedOutputStream(new FileOutputStream(file2+ "/decrypt.bmp"));
			    	out.write(DecryptImage);	//Writing decrypted image to destination
			    	end = System.currentTimeMillis();
			    	total = end-start;
			    	jTextField2.setText(String.valueOf(total));	//Setting decrytion time
			    }catch(Exception e){
			    	JOptionPane.showMessageDialog(null, e);
		    	}
	    	}else{
	    		//Encryption/Decryption with preserved header
	    		try{
	    			AESdemo obj = new AESdemo();
	    			SecretKey key = obj.Generate_key();	//Getting key
	    			
	    			long start = System.currentTimeMillis();
	    			String file = jTextField1.getText();	//getting source path
	    			BufferedImage img = obj.ReadFile(file);	//Taking image in buffered image from source
			    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
			    	
			    	ImageIO.write(img, "BMP", baos);	//Writing image to byte array output stream
			    	/*
			    	DataOutputStream dos = new DataOutputStream(baos);
			    	for(int i = 0; i < pixels.length; i++){
			    		dos.writeInt(pixels[i]);
			    	}
			    	*/
			    	
			    	baos.flush();
			    	byte[] b = baos.toByteArray();
			    	byte[] newb = new byte[b.length-54];	//declaring new byte to handle actual image data
			    	byte[] header = new byte[54];			//declaring header to handle HEADER of image
			    	
			    	//Detaching image header 
			    	for(int j = 0; j < b.length; j++){
			    		if(j < 54){
			    			header[j] = b[j];
			    		}else{
			    			newb[j-54] = b[j];
			    		}
			    	}
			    	byte encryptImg[] = AES.encrypt(newb, key.getEncoded());	//Encrypting image header
			    	//Combining image header and encrypted image to one byte array 
			    	byte combencImage[] = new byte[encryptImg.length + header.length];
			    	
			    	for(int x = 0; x < combencImage.length; x++){
			    		if(x < 54){
			    			combencImage[x] = header[x];
			    		}else{
			    			combencImage[x] = encryptImg[x-54];
			    		}
			    	}
			    	String file2 = jTextField4.getText();	//Taking destination path
			    	
			    	OutputStream out = null;
			    	FileOutputStream fos = new FileOutputStream(file2+ "/encrypt1.bmp");
			    	out = new BufferedOutputStream(fos);
			    	out.write(combencImage);	//Writing image to destination file 
			    	long end = System.currentTimeMillis();
			    	long total = end-start;	//Total time for Encryption
			    	jTextField3.setText(String.valueOf(total));	//Setting encryption time
			    	
			    	//Decryption starts here
			    	start = System.currentTimeMillis();
			    	//Decryting image
			    	byte DecryptImg[] = AES.decrypt(encryptImg, key.getEncoded());	//Decrypting encrypted image
			    	//Combining image HEADER and decrypted image bytes to one byte array
			    	byte combdecImage[] = new byte[DecryptImg.length + header.length];
			    	for(int x = 0; x < combdecImage.length; x++){
			    		if(x < 54){
			    			combdecImage[x] = header[x];
			    		}else{
			    			combdecImage[x] = DecryptImg[x-54];
			    		}
			    	}
			    	file2 = jTextField4.getText();	//Taking destination path
			    	
			    	//Writing the byte array into the file
			    	out = null;
			    	fos = new FileOutputStream(file2+ "/decrypt1.bmp");
			    	out = new BufferedOutputStream(fos);
			    	out.write(combdecImage);	//Writing image to destination file 
			    	
			    	//Calculating time for decryption
			    	end = System.currentTimeMillis();
			    	total = end-start;
			    	
			    	jTextField2.setText(String.valueOf(total));	//Setting decryption time
			    	
	    		}catch(Exception e){
	    			JOptionPane.showMessageDialog(null, e);
	    		}
	    	}
	    	
	    }//GEN-LAST:event_jButton2ActionPerformed

	    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	        // file chooser to choose image (Browse)
	        int returnVal = jFileChooser1.showOpenDialog(this);
	        if (returnVal == JFileChooser.APPROVE_OPTION)
	        {
	            File file = jFileChooser1.getSelectedFile();
	            if (!file.canRead()) {
	                file.setReadable(true);
	            }

	            // display file name in text field
	            jTextField1.setText(file.getAbsolutePath());

	        } else
	        {
	            System.out.println("You must choose a file.");
	        }
	    }//GEN-LAST:event_jButton1ActionPerformed

	    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
	        // TODO add your handling code here:
	    }//GEN-LAST:event_jTextField4ActionPerformed

	    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
	        jFileChooser2.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	        int returnVal = jFileChooser2.showOpenDialog(this);
	        if (returnVal == JFileChooser.APPROVE_OPTION)
	        {
	            File file = jFileChooser2.getSelectedFile();
	            if (!file.canRead()) {
	                file.setReadable(true);
	            }
	            // display file name in text field
	            jTextField4.setText(file.getAbsolutePath());

	        } else
	        {
	            System.out.println("You must choose a save directory.");
	        }
	    }//GEN-LAST:event_jButton3ActionPerformed
	    
	    //Method for key generation
	    private SecretKey Generate_key(){
	    	KeyGenerator keygen = null;
			try {
				keygen = KeyGenerator.getInstance("AES");
			} catch (NoSuchAlgorithmException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			keygen.init(128);	//Initializing the keygen to generate 128 bit key
			SecretKey k = keygen.generateKey();	//Generating key
			return k;
	    }
	    //Method for reading the file
	    private BufferedImage ReadFile(String file){
	    	BufferedImage img = null;
	    	try{
	    	File f = new File(file);	//Getting file
	    	img = ImageIO.read(f);		//Reading file
	    	
	    	}catch(IOException e){
	    		JOptionPane.showMessageDialog(null, "Choose your file again...");
	    	}
	    	return img;
	    }
	    /**
	     * @param args the command line arguments
	     */
	    
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>

	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new AESdemo().setVisible(true);
	            }
	        });
	    }
	    // Variables declaration - do not modify//GEN-BEGIN:variables
	    private javax.swing.JButton jButton1;
	    private javax.swing.JButton jButton2;
	    private javax.swing.JButton jButton3;
	    private javax.swing.JFileChooser jFileChooser1;
	    private javax.swing.JFileChooser jFileChooser2;
	    private javax.swing.JLabel jLabel1;
	    private javax.swing.JLabel jLabel2;
	    private javax.swing.JLabel jLabel3;
	    private javax.swing.JPanel jPanel1;
	    private javax.swing.JPanel jPanel2;
	    private javax.swing.JRadioButton jRadioButton1;
	    private javax.swing.JTextField jTextField1;
	    private javax.swing.JTextField jTextField2;
	    private javax.swing.JTextField jTextField3;
	    private javax.swing.JTextField jTextField4;
	    // End of variables declaration//GEN-END:variables
	}
	
	
	
	
	
	//Original Code:
//
//
//		/*
//		 * To change this license header, choose License Headers in Project Properties.
//		 * To change this template file, choose Tools | Templates
//		 * and open the template in the editor.
//		 */
//
//
//
//	import java.awt.image.BufferedImage;
//	import java.io.BufferedOutputStream;
//	import java.io.ByteArrayInputStream;
//	import java.io.ByteArrayOutputStream;
//	import java.io.File;
//	import java.io.FileOutputStream;
//	import java.io.IOException;
//	import java.io.OutputStream;
//	import java.security.NoSuchAlgorithmException;
//	import java.util.Arrays;
//
//	import javax.crypto.KeyGenerator;
//	import javax.crypto.SecretKey;
//	import javax.imageio.ImageIO;
//	import javax.swing.JFileChooser;
//	import javax.swing.JOptionPane;
//		/**
//		 *
//		 * @author Pradeep
//		 */
//		public class AESdemo extends javax.swing.JFrame {
//
//		  
//		    public AESdemo() {
//		        initComponents();
//		    }
//
//		    /**
//		     * This method is called from within the constructor to initialize the form.
//		     * WARNING: Do NOT modify this code. The content of this method is always
//		     * regenerated by the Form Editor.
//		     */
//		    @SuppressWarnings("unchecked")
//		    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
//		    private void initComponents() {
//
//		        jFileChooser1 = new javax.swing.JFileChooser();
//		        jFileChooser2 = new javax.swing.JFileChooser();
//		        jPanel1 = new javax.swing.JPanel();
//		        jTextField1 = new javax.swing.JTextField();
//		        jButton1 = new javax.swing.JButton();
//		        jPanel2 = new javax.swing.JPanel();
//		        jTextField2 = new javax.swing.JTextField();	//Decryption
//		        jLabel1 = new javax.swing.JLabel();
//		        jTextField3 = new javax.swing.JTextField();	//Encryption
//		        jLabel2 = new javax.swing.JLabel();
//		        jLabel3 = new javax.swing.JLabel();
//		        jButton2 = new javax.swing.JButton();
//		        jTextField4 = new javax.swing.JTextField();
//		        jButton3 = new javax.swing.JButton();
//		        jRadioButton1 = new javax.swing.JRadioButton();
//
//		        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
//
//		        jButton1.setText("Browse Files");
//		        jButton1.addActionListener(new java.awt.event.ActionListener() {
//		            public void actionPerformed(java.awt.event.ActionEvent evt) {
//		                jButton1ActionPerformed(evt);
//		            }
//		        });
//
//		        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
//
//		        jLabel1.setText("Decryption Time (ms)");
//
//		        jLabel2.setText("Encryption Time (ms)");
//
//		        jLabel3.setText("Encryption");
//
//		        jButton2.setText("Begin AES");
//		        jButton2.addActionListener(new java.awt.event.ActionListener() {
//		            public void actionPerformed(java.awt.event.ActionEvent evt) {
//		                jButton2ActionPerformed(evt);
//		            }
//		        });
//
//		        jTextField4.addActionListener(new java.awt.event.ActionListener() {
//		            public void actionPerformed(java.awt.event.ActionEvent evt) {
//		                jTextField4ActionPerformed(evt);
//		            }
//		        });
//
//		        jButton3.setText("Choose Save Directory");
//		        jButton3.addActionListener(new java.awt.event.ActionListener() {
//		            public void actionPerformed(java.awt.event.ActionEvent evt) {
//		                jButton3ActionPerformed(evt);
//		            }
//		        });
//
//		        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
//		        jPanel2.setLayout(jPanel2Layout);
//		        jPanel2Layout.setHorizontalGroup(
//		            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
//		                .addGap(35, 35, 35)
//		                .addComponent(jLabel2)
//		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//		                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
//		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
//		                .addComponent(jLabel1)
//		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//		                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
//		                .addContainerGap(32, Short.MAX_VALUE))
//		            .addGroup(jPanel2Layout.createSequentialGroup()
//		                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		                    .addGroup(jPanel2Layout.createSequentialGroup()
//		                        .addGap(17, 17, 17)
//		                        .addComponent(jButton3)
//		                        .addGap(18, 18, 18)
//		                        .addComponent(jTextField4))
//		                    .addGroup(jPanel2Layout.createSequentialGroup()
//		                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		                            .addGroup(jPanel2Layout.createSequentialGroup()
//		                                .addGap(207, 207, 207)
//		                                .addComponent(jButton2))
//		                            .addGroup(jPanel2Layout.createSequentialGroup()
//		                                .addContainerGap()
//		                                .addComponent(jLabel3)))
//		                        .addGap(0, 0, Short.MAX_VALUE)))
//		                .addContainerGap())
//		        );
//		        jPanel2Layout.setVerticalGroup(
//		            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
//		                .addContainerGap()
//		                .addComponent(jLabel3)
//		                .addGap(17, 17, 17)
//		                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//		                    .addComponent(jButton3)
//		                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
//		                .addComponent(jButton2)
//		                .addGap(30, 30, 30)
//		                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//		                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//		                    .addComponent(jLabel1)
//		                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//		                    .addComponent(jLabel2))
//		                .addGap(20, 20, 20))
//		        );
//
//		        jRadioButton1.setText("Preserve Image Header");
//		        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
//		        jPanel1.setLayout(jPanel1Layout);
//		        jPanel1Layout.setHorizontalGroup(
//		            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		            .addGroup(jPanel1Layout.createSequentialGroup()
//		                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		                    .addGroup(jPanel1Layout.createSequentialGroup()
//		                        .addGap(154, 154, 154)
//		                        .addComponent(jRadioButton1))
//		                    .addGroup(jPanel1Layout.createSequentialGroup()
//		                        .addGap(33, 33, 33)
//		                        .addComponent(jButton1)
//		                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
//		                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)))
//		                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
//		            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
//		                .addContainerGap(11, Short.MAX_VALUE)
//		                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//		                .addContainerGap(11, Short.MAX_VALUE))
//		        );
//		        jPanel1Layout.setVerticalGroup(
//		            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		            .addGroup(jPanel1Layout.createSequentialGroup()
//		                .addContainerGap(37, Short.MAX_VALUE)
//		                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
//		                    .addComponent(jButton1)
//		                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
//		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
//		                .addComponent(jRadioButton1)
//		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
//		                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
//		                .addContainerGap())
//		        );
//
//		        jPanel2.getAccessibleContext().setAccessibleName("Encryption");
//
//		        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
//		        getContentPane().setLayout(layout);
//		        layout.setHorizontalGroup(
//		            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//		        );
//		        layout.setVerticalGroup(
//		            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
//		            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
//		        );
//
//		        pack();
//		    }// </editor-fold>//GEN-END:initComponents
//
//		    @SuppressWarnings("resource")
//			private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
//		      
//		    	BufferedImage buff;
//		      /* To write code for  for encryption & decryption here... */
//		    	
//		    	//Encryption without preserving header
//		    	if(!jRadioButton1.isSelected()){
//		    		//Encryption Starts here
//		    		try{	//Generating key
//		    			AESdemo obj = new AESdemo();
//		    			SecretKey k = obj.Generate_key();
//		    			//Starting time
//				    	long start = System.currentTimeMillis();  
//				    	
//				    	String file = jTextField1.getText();
//				    	BufferedImage img = obj.ReadFile(file);	//Taking image in buffered image from source
//				    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
//				    	
//				    	ImageIO.write(img, "BMP", baos);
//				    	baos.flush();
//				    	
//				    	byte b[] = baos.toByteArray();	//Converting byte array output stream to byte array
//				    	byte encryptImg[] = AES.encrypt(b, k.getEncoded());	//Encrypting image
//				    	
//				    	String file2 = jTextField4.getText();	//Taking destination path
//				    	
//				    	OutputStream out = null;
//				    	out = new BufferedOutputStream(new FileOutputStream(file2+ "/encrypt.bmp"));
//				    	out.write(encryptImg);	//Writing image to destination
//				    	long end = System.currentTimeMillis();
//				    	long total = end-start;	//Total time for Encryption
//				    	jTextField3.setText(String.valueOf(total));	//Setting Encryption time
//				    	
//				    	//Decryption starts here
//				    	start = System.currentTimeMillis();	//Starting time
//				    	byte DecryptImage[] = AES.decrypt(encryptImg, k.getEncoded());	//Decryting Encryted image
//				    	
//				    	file2 = jTextField4.getText();	//Taking destination path
//				    	
//				    	out = null;
//				    	out = new BufferedOutputStream(new FileOutputStream(file2+ "/decrypt.bmp"));
//				    	out.write(DecryptImage);	//Writing decrypted image to destination
//				    	end = System.currentTimeMillis();
//				    	total = end-start;
//				    	jTextField2.setText(String.valueOf(total));	//Setting decrytion time
//				    }catch(Exception e){
//				    	JOptionPane.showMessageDialog(null, e);
//			    	}
//		    	}else{
//		    		//Encryption/Decryption with preserved header
//		    		try{
//		    			AESdemo obj = new AESdemo();
//		    			SecretKey key = obj.Generate_key();	//Getting key
//		    			
//		    			long start = System.currentTimeMillis();
//		    			String file = jTextField1.getText();	//getting source path
//		    			BufferedImage img = obj.ReadFile(file);	//Taking image in buffered image from source
//				    	ByteArrayOutputStream baos = new ByteArrayOutputStream();
//				    	
//				    	ImageIO.write(img, "BMP", baos);	//Writing image to byte array output stream
//				    	/*
//				    	DataOutputStream dos = new DataOutputStream(baos);
//				    	for(int i = 0; i < pixels.length; i++){
//				    		dos.writeInt(pixels[i]);
//				    	}
//				    	*/
//				    	
//				    	baos.flush();
//				    	byte[] b = baos.toByteArray();
//				    	byte[] newb = new byte[b.length-54];	//declaring new byte to handle actual image data
//				    	byte[] header = new byte[54];			//declaring header to handle HEADER of image
//				    	
//				    	//Detaching image header 
//				    	for(int j = 0; j < b.length; j++){
//				    		if(j < 54){
//				    			header[j] = b[j];
//				    		}else{
//				    			newb[j-54] = b[j];
//				    		}
//				    	}
//				    	byte encryptImg[] = AES.encrypt(newb, key.getEncoded());	//Encrypting image header
//				    	//Combining image header and encrypted image to one byte array 
//				    	byte combencImage[] = new byte[encryptImg.length + header.length];
//				    	
//				    	for(int x = 0; x < combencImage.length; x++){
//				    		if(x < 54){
//				    			combencImage[x] = header[x];
//				    		}else{
//				    			combencImage[x] = encryptImg[x-54];
//				    		}
//				    	}
//				    	String file2 = jTextField4.getText();	//Taking destination path
//				    	
//				    	OutputStream out = null;
//				    	FileOutputStream fos = new FileOutputStream(file2+ "/encrypt1.bmp");
//				    	out = new BufferedOutputStream(fos);
//				    	out.write(combencImage);	//Writing image to destination file 
//				    	long end = System.currentTimeMillis();
//				    	long total = end-start;	//Total time for Encryption
//				    	jTextField3.setText(String.valueOf(total));	//Setting encryption time
//				    	
//				    	//Decryption starts here
//				    	start = System.currentTimeMillis();
//				    	//Decryting image
//				    	byte DecryptImg[] = AES.decrypt(encryptImg, key.getEncoded());	//Decrypting encrypted image
//				    	//Combining image HEADER and decrypted image bytes to one byte array
//				    	byte combdecImage[] = new byte[DecryptImg.length + header.length];
//				    	for(int x = 0; x < combdecImage.length; x++){
//				    		if(x < 54){
//				    			combdecImage[x] = header[x];
//				    		}else{
//				    			combdecImage[x] = DecryptImg[x-54];
//				    		}
//				    	}
//				    	file2 = jTextField4.getText();	//Taking destination path
//				    	
//				    	//Writing the byte array into the file
//				    	out = null;
//				    	fos = new FileOutputStream(file2+ "/decrypt1.bmp");
//				    	out = new BufferedOutputStream(fos);
//				    	out.write(combdecImage);	//Writing image to destination file 
//				    	
//				    	//Calculating time for decryption
//				    	end = System.currentTimeMillis();
//				    	total = end-start;
//				    	
//				    	jTextField2.setText(String.valueOf(total));	//Setting decryption time
//				    	
//		    		}catch(Exception e){
//		    			JOptionPane.showMessageDialog(null, e);
//		    		}
//		    	}
//		    	
//		    }//GEN-LAST:event_jButton2ActionPerformed
//
//		    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//		        // file chooser to choose image (Browse)
//		        int returnVal = jFileChooser1.showOpenDialog(this);
//		        if (returnVal == JFileChooser.APPROVE_OPTION)
//		        {
//		            File file = jFileChooser1.getSelectedFile();
//		            if (!file.canRead()) {
//		                file.setReadable(true);
//		            }
//
//		            // display file name in text field
//		            jTextField1.setText(file.getAbsolutePath());
//
//		        } else
//		        {
//		            System.out.println("You must choose a file.");
//		        }
//		    }//GEN-LAST:event_jButton1ActionPerformed
//
//		    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
//		        // TODO add your handling code here:
//		    }//GEN-LAST:event_jTextField4ActionPerformed
//
//		    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//		        jFileChooser2.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//		        int returnVal = jFileChooser2.showOpenDialog(this);
//		        if (returnVal == JFileChooser.APPROVE_OPTION)
//		        {
//		            File file = jFileChooser2.getSelectedFile();
//		            if (!file.canRead()) {
//		                file.setReadable(true);
//		            }
//		            // display file name in text field
//		            jTextField4.setText(file.getAbsolutePath());
//
//		        } else
//		        {
//		            System.out.println("You must choose a save directory.");
//		        }
//		    }//GEN-LAST:event_jButton3ActionPerformed
//		    
//		    //Method for key generation
//		    private SecretKey Generate_key(){
//		    	KeyGenerator keygen = null;
//				try {
//					keygen = KeyGenerator.getInstance("AES");
//				} catch (NoSuchAlgorithmException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//				keygen.init(128);	//Initializing the keygen to generate 128 bit key
//				SecretKey k = keygen.generateKey();	//Generating key
//				return k;
//		    }
//		    //Method for reading the file
//		    private BufferedImage ReadFile(String file){
//		    	BufferedImage img = null;
//		    	try{
//		    	File f = new File(file);	//Getting file
//		    	img = ImageIO.read(f);		//Reading file
//		    	
//		    	}catch(IOException e){
//		    		JOptionPane.showMessageDialog(null, "Choose your file again...");
//		    	}
//		    	return img;
//		    }
//		    /**
//		     * @param args the command line arguments
//		     */
//		    
//		    public static void main(String args[]) {
//		        /* Set the Nimbus look and feel */
//		        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//		        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//		         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//		         */
//		        try {
//		            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//		                if ("Nimbus".equals(info.getName())) {
//		                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//		                    break;
//		                }
//		            }
//		        } catch (ClassNotFoundException ex) {
//		            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		        } catch (InstantiationException ex) {
//		            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		        } catch (IllegalAccessException ex) {
//		            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//		            java.util.logging.Logger.getLogger(AESdemo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//		        }
//		        //</editor-fold>
//
//		        /* Create and display the form */
//		        java.awt.EventQueue.invokeLater(new Runnable() {
//		            public void run() {
//		                new AESdemo().setVisible(true);
//		            }
//		        });
//		    }
//		    // Variables declaration - do not modify//GEN-BEGIN:variables
//		    private javax.swing.JButton jButton1;
//		    private javax.swing.JButton jButton2;
//		    private javax.swing.JButton jButton3;
//		    private javax.swing.JFileChooser jFileChooser1;
//		    private javax.swing.JFileChooser jFileChooser2;
//		    private javax.swing.JLabel jLabel1;
//		    private javax.swing.JLabel jLabel2;
//		    private javax.swing.JLabel jLabel3;
//		    private javax.swing.JPanel jPanel1;
//		    private javax.swing.JPanel jPanel2;
//		    private javax.swing.JRadioButton jRadioButton1;
//		    private javax.swing.JTextField jTextField1;
//		    private javax.swing.JTextField jTextField2;
//		    private javax.swing.JTextField jTextField3;
//		    private javax.swing.JTextField jTextField4;
//		    // End of variables declaration//GEN-END:variables
//		}